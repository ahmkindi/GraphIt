@inherits HomeBase

<li class="NavNone p-2 border-right border-dark" @onclick="OnSelectAll">Select All</li>
<li class="NavNone dropdown border-right border-dark">
    <button class="btn shadow-none dropdown-toggle" id="repre" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Representations
    </button>
    <div class="dropdown-menu" aria-labelledby="repre">
        <a class="dropdown-item" @onclick="OnMatrixClick">Adjacency Matrix</a>
        <a class="dropdown-item" @onclick="OnWeightMatrixClick">Weighted Matrix</a>
    </div>
</li>
<li class="NavNone dropdown border-right border-dark">
    <button class="btn shadow-none dropdown-toggle" id="algos" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Algorithms
    </button>
    <div class="dropdown-menu" aria-labelledby="algos">
        <a class="dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.BFS)">BFS</a>
        <a class="dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.DFS)">DFS</a>
        <a class="dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.Dijkstra)">Dijkstras Shortest Distances To Node</a>
        <a class="dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.DijkstraPath)">Dijkstras Shortest Path Between 2 Nodes</a>
        <a class="dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.MaxFlow)">Max-flow</a>
        <a class="dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.Degree)">Degree Centrality</a>
        <a class="dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.Kruskal)">Kruskals MST</a>
    </div>
</li>
@if (StartAlgorithm.Algorithm != Algorithm.None)
{
    @if (StartAlgorithm.Type != AlgorithmType.NoInput && StartAlgorithm.StartNode == null)
    {
        <li class="navbar-text font-weight-bold">Choose Start Node</li>
    }
    else if (StartAlgorithm.EndNode == null && StartAlgorithm.Type == AlgorithmType.TwoInput)
    {
        <li class="navbar-text font-weight-bold">Choose End Node</li>
    }
    else
    {
        <li class="navbar-text font-weight-bold">@StartAlgorithm.Output</li>
        @if (!Animate)
        {
            <li class="NavNone p-2" @onclick="() => Animate = true">Animate</li>
            <li class="NavNone p-2" @onclick="async () => await StartAlgorithmChanged.InvokeAsync(new StartAlgorithm())">Clear</li>
        }
        else
        {
            <li><button class="btn"><span class="oi oi-media-stop"></span></button></li>
            <li><button class="btn"><span class="oi oi-media-skip-forward"></span></button></li>
            <li><button class="btn"><span class="oi oi-media-step-forward"></span></button></li>
            <li><button class="btn" @onclick="() => Animate = false"><span class="oi oi-x"></span></button></li>
        }
    }
}