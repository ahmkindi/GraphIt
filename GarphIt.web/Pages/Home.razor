@inherits HomeBase

<li class="NavNone p-2 border-right border-dark" @onclick="OnSelectAll">Select All</li>
<li class="NavNone dropdown border-right border-dark">
    <button class="btn shadow-none dropdown-toggle" id="repre" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Representations
    </button>
    <div class="dropdown-menu" aria-labelledby="repre">
        <a class="dropdown-item" @onclick="OnMatrixClick">Adjacency Matrix</a>
        <a class="dropdown-item" @onclick="OnWeightMatrixClick">Weighted Matrix</a>
    </div>
</li>
<li class="NavNone dropdown border-right border-dark">
    <button class="btn shadow-none dropdown-toggle" id="algos" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Algorithms
    </button>
    <div class="dropdown-menu" aria-labelledby="algos">
        <button class="btn dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.BFS)" disabled="@IsDisabled[(int)Algorithm.BFS]">BFS</button>
        <button class="btn dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.DFS)" disabled="@IsDisabled[(int)Algorithm.DFS]">DFS</button>
        <button class="btn dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.Kruskal)" disabled="@IsDisabled[(int)Algorithm.Kruskal]">Kruskals MST</button>
        <button class="btn dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.Dijkstra)" disabled="@IsDisabled[(int)Algorithm.Dijkstra]">Dijkstras Single Source</button>
        <button class="btn dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.DijkstraPath)" disabled="@IsDisabled[(int)Algorithm.DijkstraPath]">Dijkstras Shortest Path</button>
        <button class="btn dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.MaxFlow)" disabled="@IsDisabled[(int)Algorithm.MaxFlow]">Max-flow</button>
        <button class="btn dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.Articulation)" disabled="@IsDisabled[(int)Algorithm.Articulation]">Articulation Points</button>
        <button class="btn dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.Degree)" disabled="@IsDisabled[(int)Algorithm.Degree]">Degree of Vertices</button>
        @if (DefaultOptions.Directed)
        {
            <button class="btn dropdown-item" @onclick="() => GetDegreePref = true" disabled="@IsDisabled[(int)Algorithm.DegreeCentrality]">Degree Centrality</button>
        }
        else
        {
            <button class="btn dropdown-item" @onclick="() => OnAlgoChanged(Algorithm.DegreeCentrality)" disabled="@IsDisabled[(int)Algorithm.DegreeCentrality]">Degree Centrality</button>
        }

    </div>
</li>
@if (StartAlgorithm.Algorithm != Algorithm.None)
{
    @if (StartAlgorithm.Type != AlgorithmType.NoInput && StartAlgorithm.StartNode == null)
    {
        <li class="navbar-text font-weight-bold px-2">Choose Start Node</li>
    }
    else if (StartAlgorithm.EndNode == null && StartAlgorithm.Type == AlgorithmType.TwoInput)
    {
        <li class="navbar-text font-weight-bold px-2">Choose End Node</li>
    }
    else
    {
        <li class="NavNone p-2" @onclick="async () => { StartAlgorithm.Clear = true; await StartAlgorithmChanged.InvokeAsync(StartAlgorithm); }">Stop</li>
        <li class="navbar-text font-weight-bold alert-success">@StartAlgorithm.Output</li>
        @*@if (!Animate)
        {
            <li class="NavNone p-2" @onclick="() => Animate = true">Animate</li>
            <li class="NavNone p-2" @onclick="async () => { StartAlgorithm.Clear = true; await StartAlgorithmChanged.InvokeAsync(StartAlgorithm); }">Clear</li>
            <li class="navbar-text font-weight-bold alert-success">@StartAlgorithm.Output</li>
        }
        else
        {
            <li><button class="btn"><span class="oi oi-media-stop"></span></button></li>
            <li><button class="btn"><span class="oi oi-media-skip-forward"></span></button></li>
            <li><button class="btn"><span class="oi oi-media-step-forward"></span></button></li>
            <li><button class="btn" @onclick="() => Animate = false"><span class="oi oi-x"></span></button></li>
        }*@
    }
}

@if (GetDegreePref)
{
    <SfDialog Width="300px" IsModal="true">
        <DialogTemplates>
            <Content>
                <div class="text-center">
                    <div class="row m-3 border-bottom border-dark">
                        How do you specify the importance of a Node?
                    </div>
                    <div class="d-flex align-items-baseline">
                        <button class="btn btn-outline-success shadow-none btn-sm"
                                @onclick="async () => { await OnAlgoChanged(Algorithm.InDegreeCentrality); GetDegreePref = false; }">
                            In-Degree
                        </button>
                        <button class="btn btn-outline-success shadow-none btn-sm"
                                @onclick="async () => { await OnAlgoChanged(Algorithm.OutDegreeCentrality); GetDegreePref = false; }">
                            Out-Degree
                        </button>
                        <button class="btn btn-outline-success shadow-none btn-sm"
                                @onclick="async () => { await OnAlgoChanged(Algorithm.DegreeCentrality); GetDegreePref = false; }">
                            Both
                        </button>
                        <button class="ml-auto btn btn-outline-dark shadow-none btn-sm" @onclick="() => GetDegreePref = false">cancel</button>
                    </div>
                </div>
            </Content>
        </DialogTemplates>
    </SfDialog>
}