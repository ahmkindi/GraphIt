@inherits NodeOptionsBase


@if (!ActiveNodes.Any())
{
    <li class="px-2">
        Default:
    </li>
    <li class="dropdown px-1" data-toggle="tooltip" data-placement="bottom" title="Color">
        <button class="btn shadow-none dropdown-toggle" style="background-color:@(DefaultOptions.NodeColor); color:@(DefaultOptions.NodeLabelColor);"
                id="nodedefcolor" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Color
        </button>
        <div class="dropdown-menu" aria-labelledby="nodedefcolor">
            <span class="dropdown-item">Fill <SfColorPicker Value="@DefaultOptions.NodeColor" ValueChange="OnDefNodeColorChange"></SfColorPicker></span>
            <span class="dropdown-item">Label <SfColorPicker Value="@DefaultOptions.NodeLabelColor" ValueChange="OnDefNodeLabelColorChange"></SfColorPicker></span>
        </div>
    </li>
    <li class="px-1">
        Radius <SfNumericTextBox TValue="int?" Value="@DefaultOptions.NodeRadius" CssClass="shortInput"
                                    Min=10 Max=100 Step=1 Format="###" @onchange="((e) => OnDefRadiusChange(e))"></SfNumericTextBox>
    </li>
}
else
{
    <li class="px-2">
        Selected:
    </li>
    <li class="dropdown px-1" data-toggle="tooltip" data-placement="bottom" title="Color">
        <button class="btn shadow-none dropdown-toggle" style="background-color: @(ActiveNodes[0].NodeColor); color: @(ActiveNodes[0].LabelColor);"
                id="mnodecolor" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Color
        </button>
        <div class="dropdown-menu" aria-labelledby="mnodecolor">
            <span class="dropdown-item">Fill <SfColorPicker Value="@ActiveNodes[0].NodeColor" ValueChange="OnNodeColorChange"></SfColorPicker></span>
            <span class="dropdown-item">Label <SfColorPicker Value="@ActiveNodes[0].LabelColor" ValueChange="OnNodeLabelColorChange"></SfColorPicker></span>
        </div>
    </li>
    if (ActiveNodes.Count == 1)
    {
        <li class="px-1">
            Radius <SfNumericTextBox TValue="int?" Value="@ActiveNodes[0].Radius" Min=10 Max=100 Step=1 Format="###" CssClass="shortInput"
                                        @onchange="((e) => OnRadiusChange(e))"></SfNumericTextBox>
        </li>
        <li class="px-1">
            Label
            <SfTextBox CssClass="shortInput" ValueChange="OnNodeLabelChange" Value="@ActiveNodes.ElementAt(0).Label"></SfTextBox>
        </li>
        <li>
            <button type="button" class="btn NavNone shadow-none" @onclick="OnRecenter">Re-Center</button>
        </li>
    }
    else
    {
        <li class="px-1">
            Radius <SfNumericTextBox TValue="int?" Min=10 Max=100 Step=1 Format="###" CssClass="shortInput" @onchange="((e) => OnRadiusChange(e))"></SfNumericTextBox>
        </li>
        <li class="px-1">
            Label
            <SfTextBox CssClass="shortInput" ValueChange="OnNodeLabelChange"></SfTextBox>
        </li>
    }
}
<li><button type="button" class="btn NavNone shadow-none" @onclick="OnRelabel">Re-label</button></li>
