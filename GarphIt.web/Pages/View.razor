@inherits ViewBase
@if (MatchCase.Active)
{
    MatchCase.Css = "NavActive";
}
else
{
    MatchCase.Css = "NavNone";
}
@if (MatchExact.Active)
{
    MatchExact.Css = "NavActive";
}
else
{
    MatchExact.Css = "NavNone";
}
<li class="NavNone p-2 border-dark border-right" @onclick="Fit">Graph Fit</li>
<li class="d-flex flex-row px-2 border-dark border-right">
    @if (ZoomService.GetPercentageInt(SVGControl.Scale) <= 10)
    {
        <div class="btn disabled py-2 px-1"><span class="oi oi-zoom-out"></span></div>
    }
    else
    {
        <div class="NavNone py-2 px-1" @onclick="@(() => OnScaleClick(true))"><span class="oi oi-zoom-out"></span></div>
    }
    <div class="btn-group">
        <input type="number" class="shortInput" value="@ZoomService.GetPercentageInt(SVGControl.Scale)" min="1" max="349"
               @onchange="async (e) => { ZoomService.NewInput(e.Value.ToString(), SVGControl); await SVGControlChanged.InvokeAsync(SVGControl); }">
        <button type="button" class="btn btn-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <span class="sr-only">Toggle Dropdown</span>
        </button>
        <div class="dropdown-menu">
            <a class="dropdown-item" @onclick="() => SelectionZoom(0.1)">@ZoomService.GetPercentage(0.1)</a>
            <a class="dropdown-item" @onclick="() => SelectionZoom(0.6)">@ZoomService.GetPercentage(0.6)</a>
            <a class="dropdown-item" @onclick="() => SelectionZoom(1.1)">@ZoomService.GetPercentage(1.1)</a>
            <a class="dropdown-item" @onclick="() => SelectionZoom(1.6)">@ZoomService.GetPercentage(1.6)</a>
            <a class="dropdown-item" @onclick="() => SelectionZoom(2.1)">@ZoomService.GetPercentage(2.1)</a>
            <a class="dropdown-item" @onclick="() => SelectionZoom(2.5)">@ZoomService.GetPercentage(2.5)</a>
            <a class="dropdown-item" @onclick="() => SelectionZoom(2.7)">@ZoomService.GetPercentage(2.7)</a>
            <a class="dropdown-item" @onclick="() => SelectionZoom(2.9)">@ZoomService.GetPercentage(2.9)</a>
            <a class="dropdown-item" @onclick="() => SelectionZoom(3.1)">@ZoomService.GetPercentage(3.1)</a>
            <a class="dropdown-item" @onclick="() => SelectionZoom(3.3)">@ZoomService.GetPercentage(3.3)</a>
            <a class="dropdown-item" @onclick="() => SelectionZoom(3.4)">@ZoomService.GetPercentage(3.4)</a>
        </div>
    </div>
    @if (ZoomService.GetPercentageInt(SVGControl.Scale) >= 340)
    {
        <div class="btn disabled py-2 px-1"><span class="oi oi-zoom-in"></span></div>
    }
    else
    {
        <div class="NavNone py-2 px-1" @onclick="@(() => OnScaleClick(false))"><span class="oi oi-zoom-in"></span></div>
    }
</li>
<li class="d-flex flex-row px-2">
    <div class="py-2 px-1 @MatchCase.Css font-weight-bold" data-toggle="tooltip" data-placement="bottom" title="Match case" 
         @onclick="MatchCaseClicked">Aa</div>
    <div class="py-2 px-1 @MatchExact.Css " data-toggle="tooltip" data-placement="bottom" title="Match whole word" 
         @onclick="MatchExactClicked"><u>Ab|</u></div>
    <div class="p-custom">
        <input class="medInput" placeholder="Find..." value="@Filter" @oninput="OnLabelChange" />
    </div>
    @if (FilterNodes.Any())
    {
        <div class="NavNone py-2 px-1" @onclick="() => IterateNodes(FilterNodes.Count-1)">
            <span class="oi oi-arrow-thick-bottom"></span>
        </div>
        <div class="NavNone py-2 px-1" @onclick="() => IterateNodes(1)">
            <span class="oi oi-arrow-thick-top"></span>
        </div>
    }
    else
    {
        <div class="btn disabled py-2 px-1">
            <span class="oi oi-arrow-thick-bottom"></span>
        </div>
        <div class="btn disabled py-2 px-1">
            <span class="oi oi-arrow-thick-top"></span>
        </div>
    }
    @if (ActiveNodes.Count == 1 && FilterNodes.Contains(ActiveNodes[0]))
    {
        <div class="py-2">
            @($"{Counter+1}/{FilterNodes.Count}")
        </div>
    }
</li>
@if (ActiveNodes.Count == 1)
{
    <li class="NavNone p-2 border-dark border-left" @onclick="OnRecenter">Re-Center</li>
}
else if (ActiveNodes.Count > 1)
{
    <li class="NavNone dropdown border-dark border-left">
        <button class="btn shadow-none dropdown-toggle" id="align" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Align Nodes
        </button>
        <div class="dropdown-menu" aria-labelledby="align">
            <a class="dropdown-item" @onclick='async () => { NodeService.Align(ActiveNodes, "Left"); await ActiveNodesChanged.InvokeAsync(ActiveNodes); }'>
                <span class="pr-1 oi oi-align-left"></span>Left
            </a>
            <a class="dropdown-item" @onclick='async () => { NodeService.Align(ActiveNodes, "Center"); await ActiveNodesChanged.InvokeAsync(ActiveNodes); }'>
                <span class="pr-1 oi oi-align-center"></span>Center
            </a>
            <a class="dropdown-item" @onclick='async () => { NodeService.Align(ActiveNodes, "Right"); await ActiveNodesChanged.InvokeAsync(ActiveNodes); }'>
                <span class="pr-1 oi oi-align-right"></span>Right
            </a>
            <div class="dropdown-divider"></div>
            <a class="dropdown-item" @onclick='async () => { NodeService.Align(ActiveNodes, "Top"); await ActiveNodesChanged.InvokeAsync(ActiveNodes); }'>
                <span class="pr-1 oi oi-vertical-align-top"></span>Top
            </a>
            <a class="dropdown-item" @onclick='async () => { NodeService.Align(ActiveNodes, "Middle"); await ActiveNodesChanged.InvokeAsync(ActiveNodes); }'>
                <span class="pr-1 oi oi-vertical-align-center"></span>Middle
            </a>
            <a class="dropdown-item" @onclick='async () => { NodeService.Align(ActiveNodes, "Bottom"); await ActiveNodesChanged.InvokeAsync(ActiveNodes); }'>
                <span class="pr-1 oi oi-vertical-align-bottom"></span>Bottom
            </a>
        </div>
    </li>
}

