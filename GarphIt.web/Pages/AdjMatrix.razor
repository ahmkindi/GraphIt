@inherits AdjMatrixBase

<SfDialog Target="#target" Width="400px" Height="400px" AllowDragging="true">
    <DialogTemplates>
        <Header> Adjacency Matrix </Header>
        <Content>
            @if (Nodes == null || Edges == null)
            {
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
            else if (TextView)
            {
        <div class="multiline">
            @if (GetInitText)
            {
                <SfTextBox Multiline="true" Placeholder="Add Nodes by typing 0, 1" Value="@GetText()" @onchange="OnChangeText">
                </SfTextBox>
            }
            else
            {
                <SfTextBox Multiline="true" Placeholder="Add Nodes by typing 0, 1" Value="@TextMatrix" @onchange="OnChangeText">
                </SfTextBox>
            }
            @if (!ValidInput)
            {
                if (Rep == Representation.Matrix)
                {
                    <div class="text-danger">There was formatting error: please input only a sqaure matrix of either 0, 1 comma seperated</div>
                }
                else
                {
                    <div class="text-danger">There was formatting error, please input only a square matrix of decimal numbers upto 2 decimal places, comma seperated</div>
                }

            }
        </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th scope="col">Node 
                                <button type="button" class="btn btn-sm btn-success p-0" 
                                        @onclick="(async() => { await AddNode(NodeCount.ToString()); await UpdateCanvas.InvokeAsync(true); })">+</button></th>
                                @foreach (Node node in Nodes)
                                {
                                    <th scope="col">@node.Label</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (Node tail in Nodes)
                            {
                            <tr>
                                <th scope="row">
                                    @tail.Label
                                    <button type="button" class="btn btn-sm btn-danger p-0"
                                            @onclick="(async() => { await NodeService.DeleteNode(tail.NodeId); await UpdateCanvas.InvokeAsync(true); })">
                                        X
                                    </button>
                                </th>
                                @foreach (Node head in Nodes)
                                {
                                    Edge edge = Adjacent(tail, head);
                            <td class="p-0 m-0">
                                @if (edge != null)
                                {
                                    if (Rep == Representation.Matrix)
                                    {
                                        <SfNumericTextBox TValue="int?" Value="1" Min=0 Max=1 ShowSpinButton=false CssClass="shortInput"
                                                          Placeholder="Adjacent" @onchange="((e) => OnChangeTable(e, tail, head))"></SfNumericTextBox>
                                    }
                                    else
                                    {
                                        <SfNumericTextBox Value="@edge.Weight" Min=0 ShowSpinButton=false CssClass="shortInput"
                                                          Placeholder="Adjacent" @onchange="((e) => OnChangeTable(e, tail, head))"></SfNumericTextBox>
                                    }
                                }
                                else
                                {
                                    if (Rep == Representation.Matrix)
                                    {
                                        <SfNumericTextBox TValue="int?" Value="0" Min=0 Max=1 ShowSpinButton=false CssClass="shortInput"
                                                          Placeholder="Adjacent" @onchange="((e) => OnChangeTable(e, tail, head))"></SfNumericTextBox>
                                    }
                                    else
                                    {
                                        <SfNumericTextBox Value="0" Min=0 ShowSpinButton=false CssClass="shortInput"
                                                          Placeholder="Adjacent" @onchange="((e) => OnChangeTable(e, tail, head))"></SfNumericTextBox>
                                    }


                                }
                            </td>
                                    }
                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </Content>
    </DialogTemplates>
    <DialogButtons>
        @if (TextView)
        {
            <DialogButton Content="Table View" OnClick="(() => TextView = !TextView)" />
            <DialogButton Content="Close" OnClick="@CloseMatrix" />
        }
        else
        {
            <DialogButton Content="Text View" OnClick="(() => { TextView = !TextView; GetInitText = true; })" />
            <DialogButton Content="Close" OnClick="@CloseMatrix" />
        }
    </DialogButtons>
</SfDialog>
