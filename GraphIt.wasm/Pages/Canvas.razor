@inherits CanvasBase

<SfContextMenu @ref="ObjectContextMenu" TValue="MenuItem">
    <MenuItems>
        <MenuItem Text="Copy" Disabled="@(!ActiveGraph.Nodes.Any())" IconCss="oi oi-layers"></MenuItem>
        <MenuItem Text="Paste" Disabled="@(!CopiedGraph.Nodes.Any())" IconCss="oi oi-clipboard"></MenuItem>
        <MenuItem Separator="true"></MenuItem>
        <MenuItem Text="Insert Edge" Hidden="@(ActiveGraph.Nodes.Count != 1)" IconCss="oi oi-transfer"></MenuItem>
        <MenuItem Text="Align" Disabled="@(ActiveGraph.Nodes.Count < 2)" IconCss="oi oi-project">
            <MenuItems>
                <MenuItem Text="Left" IconCss="oi oi-align-left"></MenuItem>
                <MenuItem Text="Center" IconCss="oi oi-align-center"></MenuItem>
                <MenuItem Text="Right" IconCss="oi oi-align-right"></MenuItem>
                <MenuItem Separator="true"></MenuItem>
                <MenuItem Text="Top" IconCss="oi oi-vertical-align-top"></MenuItem>
                <MenuItem Text="Middle" IconCss="oi oi-vertical-align-center"></MenuItem>
                <MenuItem Text="Bottom" IconCss="oi oi-vertical-align-bottom"></MenuItem>
            </MenuItems>
        </MenuItem>
        <MenuItem Text="Edit" Hidden="@(ActiveGraph.Nodes.Any() && ActiveGraph.Edges.Any())" IconCss="oi oi-pencil"></MenuItem>
        <MenuItem Text="Edit" Hidden="@(!(ActiveGraph.Nodes.Any() && ActiveGraph.Edges.Any()))" IconCss="oi oi-pencil">
            <MenuItems>
                <MenuItem Text="Nodes" IconCss="oi oi-media-record"></MenuItem>
                <MenuItem Text="Edges" IconCss="oi oi-transfer"></MenuItem>
            </MenuItems>
        </MenuItem>
        <MenuItem Text="Delete" IconCss="oi oi-trash"></MenuItem>
    </MenuItems>
    <MenuEvents TValue="MenuItem" ItemSelected="@Select"></MenuEvents>
</SfContextMenu>
<SfContextMenu @ref="CanvasContextMenu" TValue="MenuItem">
    <MenuItems>
        <MenuItem Text="Copy" Disabled="true" IconCss="oi oi-layers"></MenuItem>
        <MenuItem Text="Paste" Disabled="@(!CopiedGraph.Nodes.Any())" IconCss="oi oi-clipboard"></MenuItem>
        <MenuItem Separator="true"></MenuItem>
        <MenuItem Text="Zoom In" IconCss="oi oi-zoom-in"></MenuItem>
        <MenuItem Text="Zoom Out" IconCss="oi oi-zoom-out"></MenuItem>
        <MenuItem Separator="true"></MenuItem>
        <MenuItem Text="Insert Node" IconCss="oi oi-plus"></MenuItem>
        <MenuItem Text="Select">
            <MenuItems>
                <MenuItem Text="All Nodes" IconCss="oi oi-media-record"></MenuItem>
                <MenuItem Text="All Edges" IconCss="oi oi-transfer"></MenuItem>
                <MenuItem Text="Everything"></MenuItem>
            </MenuItems>
        </MenuItem>
    </MenuItems>
    <MenuEvents TValue="MenuItem" ItemSelected="@Select"></MenuEvents>
</SfContextMenu>
<SfContextMenu @ref="AlgorithmContextMenu" TValue="MenuItem">
    <MenuItems>
        <MenuItem Text="Stop Algorithm" IconCss="oi oi-media-stop"></MenuItem>
        <MenuItem Separator="true"></MenuItem>
        <MenuItem Text="Zoom In" IconCss="oi oi-zoom-in"></MenuItem>
        <MenuItem Text="Zoom Out" IconCss="oi oi-zoom-out"></MenuItem>
    </MenuItems>
    <MenuEvents TValue="MenuItem" ItemSelected="@Select"></MenuEvents>
</SfContextMenu>

<svg viewBox="@SVGControl.Xaxis @SVGControl.Yaxis @SVGControl.Width @SVGControl.Height" @ref="SVGComponent"
     tabindex="0" class="@SvgClass" @onmousemove="OnMove" @onmousedown="OnMouseDown" @onkeyup="OnKeyUp" @onkeydown="OnKeyDown" @onkeydown:preventDefault="true"
     @oncontextmenu="OnRightClick" @oncontextmenu:preventDefault="true" @onmouseup="OnMouseUp" @onmousewheel="OnScroll" @onwheel="OnScroll">
    @if (StartAlgorithm.Done && AlgorithmGraph != null)
    {
        foreach (Edge edge in AlgorithmGraph.Edges)
        {
            <AlgoEdgeLine Edge="edge" Weighted="Graph.Weighted" Directed="Graph.Directed"></AlgoEdgeLine>
        }
        foreach (Node node in AlgorithmGraph.Nodes)
        {
            <AlgoNodeCircle Node="node"></AlgoNodeCircle>
        }
    }
    else if (Graph.Nodes != null)
    {
        @if (Graph.Edges != null)
        {
            foreach (Edge edge in Graph.Edges)
            {
                if (ActiveGraph.Edges.Contains(edge))
                {
                    continue;
                }
                <EdgeLine Edge="edge" Active="false" ActiveNodes="ActiveGraph.Nodes" @bind-ObjectClicked="ObjectClicked" OnEdgeClick="OnEdgeClick" AddActiveEdge="AddActiveEdge"
                          RemoveActiveEdge="RemoveActiveEdge" OnEdgeRightClick="OnEdgeRightClick" Weighted="Graph.Weighted" Directed="Graph.Directed"></EdgeLine>
            }
            foreach (Edge edge in ActiveGraph.Edges)
            {
                <EdgeLine Edge="edge" Active="true" ActiveNodes="ActiveGraph.Nodes" @bind-ObjectClicked="ObjectClicked" OnEdgeClick="OnEdgeClick" AddActiveEdge="AddActiveEdge"
                          RemoveActiveEdge="RemoveActiveEdge" Weighted="Graph.Weighted" Directed="Graph.Directed"></EdgeLine>
            }
        }
        foreach (Node node in Graph.Nodes)
        {

            if (ActiveGraph.Nodes.Contains(node))
            {
                continue;
            }
            <NodeCircle Node="node" Active="false" @bind-ObjectClicked="ObjectClicked" OnNodeClick="OnNodeClick"
                        OnNodeRightClick="OnNodeRightClick" AddActiveNode="AddActiveNode" RemoveActiveNode="RemoveActiveNode"></NodeCircle>
        }
        foreach (Node node in ActiveGraph.Nodes)
        {
            <NodeCircle Node="node" Active="true" @bind-ObjectClicked="ObjectClicked" OnNodeClick="OnNodeClick"
                        OnNodeRightClick="OnNodeRightClick" AddActiveNode="AddActiveNode" RemoveActiveNode="RemoveActiveNode"></NodeCircle>
        }
    }
    @if (RectSelection.Create)
    {
        <rect x="@RectSelection.X" y="@RectSelection.Y" width="@RectSelection.Width" height="@RectSelection.Height" stroke="#0c344d" fill="#008de6" fill-opacity="0.25"></rect>
    }
</svg>
@if (NewEdge.GetEdgeWeight)
{
    <SfDialog Width="300px" IsModal="true">
        <DialogTemplates>
            <Content>
                <SfNumericTextBox Min=1 Placeholder="Edge Weight" FloatLabelType="@FloatLabelType.Auto" @bind-Value="NewEdge.Weight"></SfNumericTextBox>
                @if (NewEdge.MultiEdges.Any())
                {
                    <SfCheckBox @bind-Checked="NewEdge.MultiGraph" Label="Multi-Graph"></SfCheckBox>
                }
                <SfButton CssClass="e-success" @onclick="(() => AddNewEdge(true))">Done</SfButton>
                <SfButton CssClass="e-danger" @onclick="(() => AddNewEdge(false))">Cancel</SfButton>
            </Content>
        </DialogTemplates>
    </SfDialog>
}
else if (NewEdge.MultiEdges.Any())
{
    <SfDialog Width="300px" IsModal="true">
        <DialogTemplates>
            <Content>
                <SfCheckBox @bind-Checked="NewEdge.MultiGraph" Label="Multi-Graph"></SfCheckBox>
                <SfButton CssClass="e-success" @onclick="(() => AddNewEdge(true))">Done</SfButton>
                <SfButton CssClass="e-danger" @onclick="(() => AddNewEdge(false))">Cancel</SfButton>
            </Content>
        </DialogTemplates>
    </SfDialog>
}
@if (StartAlgorithm.Clear)
{
    <SfDialog Width="300px" IsModal="true">
        <DialogTemplates>
            <Content>
                <div class="text-center">
                    <div class="row m-3 border-bottom border-dark">
                        Save changes to your original graph?
                    </div>
                    <div class="d-flex align-items-baseline">
                        <button class="btn btn-outline-success shadow-none btn-sm" @onclick="Save">Save</button>
                        <button class="btn btn-outline-danger shadow-none btn-sm" @onclick="Reset">Reset</button>
                    </div>
                </div>
            </Content>
        </DialogTemplates>
    </SfDialog>
}
